// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
	"strings"

	"github.com/LingeringAutumn/Yijie/kitex_gen/model"
)

type RegisterRequest struct {
	Username string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
	Email    string `thrift:"email,3,required" frugal:"3,required,string" json:"email"`
	Phone    string `thrift:"phone,4,required" frugal:"4,required,string" json:"phone"`
}

func NewRegisterRequest() *RegisterRequest {
	return &RegisterRequest{}
}

func (p *RegisterRequest) InitDefault() {
}

func (p *RegisterRequest) GetUsername() (v string) {
	return p.Username
}

func (p *RegisterRequest) GetPassword() (v string) {
	return p.Password
}

func (p *RegisterRequest) GetEmail() (v string) {
	return p.Email
}

func (p *RegisterRequest) GetPhone() (v string) {
	return p.Phone
}
func (p *RegisterRequest) SetUsername(val string) {
	p.Username = val
}
func (p *RegisterRequest) SetPassword(val string) {
	p.Password = val
}
func (p *RegisterRequest) SetEmail(val string) {
	p.Email = val
}
func (p *RegisterRequest) SetPhone(val string) {
	p.Phone = val
}

func (p *RegisterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterRequest(%+v)", *p)
}

func (p *RegisterRequest) DeepEqual(ano *RegisterRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	if !p.Field3DeepEqual(ano.Email) {
		return false
	}
	if !p.Field4DeepEqual(ano.Phone) {
		return false
	}
	return true
}

func (p *RegisterRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *RegisterRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *RegisterRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *RegisterRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Phone, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_RegisterRequest = map[int16]string{
	1: "username",
	2: "password",
	3: "email",
	4: "phone",
}

type RegisterResponse struct {
	Base   *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	UserID int64           `thrift:"userID,2,required" frugal:"2,required,i64" json:"userID"`
}

func NewRegisterResponse() *RegisterResponse {
	return &RegisterResponse{}
}

func (p *RegisterResponse) InitDefault() {
}

var RegisterResponse_Base_DEFAULT *model.BaseResp

func (p *RegisterResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return RegisterResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *RegisterResponse) GetUserID() (v int64) {
	return p.UserID
}
func (p *RegisterResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *RegisterResponse) SetUserID(val int64) {
	p.UserID = val
}

func (p *RegisterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RegisterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResponse(%+v)", *p)
}

func (p *RegisterResponse) DeepEqual(ano *RegisterResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserID) {
		return false
	}
	return true
}

func (p *RegisterResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RegisterResponse) Field2DeepEqual(src int64) bool {

	if p.UserID != src {
		return false
	}
	return true
}

var fieldIDToName_RegisterResponse = map[int16]string{
	1: "base",
	2: "userID",
}

type LoginRequest struct {
	Username        string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Password        string `thrift:"password,2" frugal:"2,default,string" json:"password"`
	ConfirmPassword string `thrift:"confirm_password,3" frugal:"3,default,string" json:"confirm_password"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) InitDefault() {
}

func (p *LoginRequest) GetUsername() (v string) {
	return p.Username
}

func (p *LoginRequest) GetPassword() (v string) {
	return p.Password
}

func (p *LoginRequest) GetConfirmPassword() (v string) {
	return p.ConfirmPassword
}
func (p *LoginRequest) SetUsername(val string) {
	p.Username = val
}
func (p *LoginRequest) SetPassword(val string) {
	p.Password = val
}
func (p *LoginRequest) SetConfirmPassword(val string) {
	p.ConfirmPassword = val
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)
}

func (p *LoginRequest) DeepEqual(ano *LoginRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConfirmPassword) {
		return false
	}
	return true
}

func (p *LoginRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ConfirmPassword, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_LoginRequest = map[int16]string{
	1: "username",
	2: "password",
	3: "confirm_password",
}

type LoginResponse struct {
	Base *model.BaseResp `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	User *model.UserInfo `thrift:"user,2" frugal:"2,default,model.UserInfo" json:"user"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) InitDefault() {
}

var LoginResponse_Base_DEFAULT *model.BaseResp

func (p *LoginResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return LoginResponse_Base_DEFAULT
	}
	return p.Base
}

var LoginResponse_User_DEFAULT *model.UserInfo

func (p *LoginResponse) GetUser() (v *model.UserInfo) {
	if !p.IsSetUser() {
		return LoginResponse_User_DEFAULT
	}
	return p.User
}
func (p *LoginResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *LoginResponse) SetUser(val *model.UserInfo) {
	p.User = val
}

func (p *LoginResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginResponse) IsSetUser() bool {
	return p.User != nil
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)
}

func (p *LoginResponse) DeepEqual(ano *LoginResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	return true
}

func (p *LoginResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LoginResponse) Field2DeepEqual(src *model.UserInfo) bool {

	if !p.User.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_LoginResponse = map[int16]string{
	1: "base",
	2: "user",
}

type UpdateUserProfileRequest struct {
	Uid            int64                 `thrift:"uid,1,required" frugal:"1,required,i64" json:"uid"`
	UserProfileReq *model.UserProfileReq `thrift:"userProfileReq,2,required" frugal:"2,required,model.UserProfileReq" json:"userProfileReq"`
}

func NewUpdateUserProfileRequest() *UpdateUserProfileRequest {
	return &UpdateUserProfileRequest{}
}

func (p *UpdateUserProfileRequest) InitDefault() {
}

func (p *UpdateUserProfileRequest) GetUid() (v int64) {
	return p.Uid
}

var UpdateUserProfileRequest_UserProfileReq_DEFAULT *model.UserProfileReq

func (p *UpdateUserProfileRequest) GetUserProfileReq() (v *model.UserProfileReq) {
	if !p.IsSetUserProfileReq() {
		return UpdateUserProfileRequest_UserProfileReq_DEFAULT
	}
	return p.UserProfileReq
}
func (p *UpdateUserProfileRequest) SetUid(val int64) {
	p.Uid = val
}
func (p *UpdateUserProfileRequest) SetUserProfileReq(val *model.UserProfileReq) {
	p.UserProfileReq = val
}

func (p *UpdateUserProfileRequest) IsSetUserProfileReq() bool {
	return p.UserProfileReq != nil
}

func (p *UpdateUserProfileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserProfileRequest(%+v)", *p)
}

func (p *UpdateUserProfileRequest) DeepEqual(ano *UpdateUserProfileRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserProfileReq) {
		return false
	}
	return true
}

func (p *UpdateUserProfileRequest) Field1DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *UpdateUserProfileRequest) Field2DeepEqual(src *model.UserProfileReq) bool {

	if !p.UserProfileReq.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UpdateUserProfileRequest = map[int16]string{
	1: "uid",
	2: "userProfileReq",
}

type UpdateUserProfileResponse struct {
	Base            *model.BaseResp        `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	UserProfileResp *model.UserProfileResp `thrift:"userProfileResp,2,required" frugal:"2,required,model.UserProfileResp" json:"userProfileResp"`
}

func NewUpdateUserProfileResponse() *UpdateUserProfileResponse {
	return &UpdateUserProfileResponse{}
}

func (p *UpdateUserProfileResponse) InitDefault() {
}

var UpdateUserProfileResponse_Base_DEFAULT *model.BaseResp

func (p *UpdateUserProfileResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UpdateUserProfileResponse_Base_DEFAULT
	}
	return p.Base
}

var UpdateUserProfileResponse_UserProfileResp_DEFAULT *model.UserProfileResp

func (p *UpdateUserProfileResponse) GetUserProfileResp() (v *model.UserProfileResp) {
	if !p.IsSetUserProfileResp() {
		return UpdateUserProfileResponse_UserProfileResp_DEFAULT
	}
	return p.UserProfileResp
}
func (p *UpdateUserProfileResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *UpdateUserProfileResponse) SetUserProfileResp(val *model.UserProfileResp) {
	p.UserProfileResp = val
}

func (p *UpdateUserProfileResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateUserProfileResponse) IsSetUserProfileResp() bool {
	return p.UserProfileResp != nil
}

func (p *UpdateUserProfileResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserProfileResponse(%+v)", *p)
}

func (p *UpdateUserProfileResponse) DeepEqual(ano *UpdateUserProfileResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserProfileResp) {
		return false
	}
	return true
}

func (p *UpdateUserProfileResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateUserProfileResponse) Field2DeepEqual(src *model.UserProfileResp) bool {

	if !p.UserProfileResp.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UpdateUserProfileResponse = map[int16]string{
	1: "base",
	2: "userProfileResp",
}

type GetUserProfileRequest struct {
	Uid int64 `thrift:"uid,1,required" frugal:"1,required,i64" json:"uid"`
}

func NewGetUserProfileRequest() *GetUserProfileRequest {
	return &GetUserProfileRequest{}
}

func (p *GetUserProfileRequest) InitDefault() {
}

func (p *GetUserProfileRequest) GetUid() (v int64) {
	return p.Uid
}
func (p *GetUserProfileRequest) SetUid(val int64) {
	p.Uid = val
}

func (p *GetUserProfileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserProfileRequest(%+v)", *p)
}

func (p *GetUserProfileRequest) DeepEqual(ano *GetUserProfileRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *GetUserProfileRequest) Field1DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

var fieldIDToName_GetUserProfileRequest = map[int16]string{
	1: "uid",
}

type GetUserProfileResponse struct {
	Base            *model.BaseResp        `thrift:"base,1" frugal:"1,default,model.BaseResp" json:"base"`
	UserProfileResp *model.UserProfileResp `thrift:"userProfileResp,2,required" frugal:"2,required,model.UserProfileResp" json:"userProfileResp"`
}

func NewGetUserProfileResponse() *GetUserProfileResponse {
	return &GetUserProfileResponse{}
}

func (p *GetUserProfileResponse) InitDefault() {
}

var GetUserProfileResponse_Base_DEFAULT *model.BaseResp

func (p *GetUserProfileResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetUserProfileResponse_Base_DEFAULT
	}
	return p.Base
}

var GetUserProfileResponse_UserProfileResp_DEFAULT *model.UserProfileResp

func (p *GetUserProfileResponse) GetUserProfileResp() (v *model.UserProfileResp) {
	if !p.IsSetUserProfileResp() {
		return GetUserProfileResponse_UserProfileResp_DEFAULT
	}
	return p.UserProfileResp
}
func (p *GetUserProfileResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetUserProfileResponse) SetUserProfileResp(val *model.UserProfileResp) {
	p.UserProfileResp = val
}

func (p *GetUserProfileResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetUserProfileResponse) IsSetUserProfileResp() bool {
	return p.UserProfileResp != nil
}

func (p *GetUserProfileResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserProfileResponse(%+v)", *p)
}

func (p *GetUserProfileResponse) DeepEqual(ano *GetUserProfileResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserProfileResp) {
		return false
	}
	return true
}

func (p *GetUserProfileResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetUserProfileResponse) Field2DeepEqual(src *model.UserProfileResp) bool {

	if !p.UserProfileResp.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_GetUserProfileResponse = map[int16]string{
	1: "base",
	2: "userProfileResp",
}

type UserService interface {
	Register(ctx context.Context, req *RegisterRequest) (r *RegisterResponse, err error)

	Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error)

	UpdateProfile(ctx context.Context, req *UpdateUserProfileRequest) (r *UpdateUserProfileResponse, err error)

	GetProfile(ctx context.Context, req *GetUserProfileRequest) (r *GetUserProfileResponse, err error)
}

type UserServiceRegisterArgs struct {
	Req *RegisterRequest `thrift:"req,1" frugal:"1,default,RegisterRequest" json:"req"`
}

func NewUserServiceRegisterArgs() *UserServiceRegisterArgs {
	return &UserServiceRegisterArgs{}
}

func (p *UserServiceRegisterArgs) InitDefault() {
}

var UserServiceRegisterArgs_Req_DEFAULT *RegisterRequest

func (p *UserServiceRegisterArgs) GetReq() (v *RegisterRequest) {
	if !p.IsSetReq() {
		return UserServiceRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRegisterArgs) SetReq(val *RegisterRequest) {
	p.Req = val
}

func (p *UserServiceRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterArgs(%+v)", *p)
}

func (p *UserServiceRegisterArgs) DeepEqual(ano *UserServiceRegisterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceRegisterArgs) Field1DeepEqual(src *RegisterRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceRegisterArgs = map[int16]string{
	1: "req",
}

type UserServiceRegisterResult struct {
	Success *RegisterResponse `thrift:"success,0,optional" frugal:"0,optional,RegisterResponse" json:"success,omitempty"`
}

func NewUserServiceRegisterResult() *UserServiceRegisterResult {
	return &UserServiceRegisterResult{}
}

func (p *UserServiceRegisterResult) InitDefault() {
}

var UserServiceRegisterResult_Success_DEFAULT *RegisterResponse

func (p *UserServiceRegisterResult) GetSuccess() (v *RegisterResponse) {
	if !p.IsSetSuccess() {
		return UserServiceRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterResponse)
}

func (p *UserServiceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterResult(%+v)", *p)
}

func (p *UserServiceRegisterResult) DeepEqual(ano *UserServiceRegisterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceRegisterResult) Field0DeepEqual(src *RegisterResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceRegisterResult = map[int16]string{
	0: "success",
}

type UserServiceLoginArgs struct {
	Req *LoginRequest `thrift:"req,1" frugal:"1,default,LoginRequest" json:"req"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
	return &UserServiceLoginArgs{}
}

func (p *UserServiceLoginArgs) InitDefault() {
}

var UserServiceLoginArgs_Req_DEFAULT *LoginRequest

func (p *UserServiceLoginArgs) GetReq() (v *LoginRequest) {
	if !p.IsSetReq() {
		return UserServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginArgs) SetReq(val *LoginRequest) {
	p.Req = val
}

func (p *UserServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

func (p *UserServiceLoginArgs) DeepEqual(ano *UserServiceLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceLoginArgs) Field1DeepEqual(src *LoginRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceLoginArgs = map[int16]string{
	1: "req",
}

type UserServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0,optional" frugal:"0,optional,LoginResponse" json:"success,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
	return &UserServiceLoginResult{}
}

func (p *UserServiceLoginResult) InitDefault() {
}

var UserServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *UserServiceLoginResult) GetSuccess() (v *LoginResponse) {
	if !p.IsSetSuccess() {
		return UserServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResponse)
}

func (p *UserServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

func (p *UserServiceLoginResult) DeepEqual(ano *UserServiceLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceLoginResult) Field0DeepEqual(src *LoginResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceLoginResult = map[int16]string{
	0: "success",
}

type UserServiceUpdateProfileArgs struct {
	Req *UpdateUserProfileRequest `thrift:"req,1" frugal:"1,default,UpdateUserProfileRequest" json:"req"`
}

func NewUserServiceUpdateProfileArgs() *UserServiceUpdateProfileArgs {
	return &UserServiceUpdateProfileArgs{}
}

func (p *UserServiceUpdateProfileArgs) InitDefault() {
}

var UserServiceUpdateProfileArgs_Req_DEFAULT *UpdateUserProfileRequest

func (p *UserServiceUpdateProfileArgs) GetReq() (v *UpdateUserProfileRequest) {
	if !p.IsSetReq() {
		return UserServiceUpdateProfileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateProfileArgs) SetReq(val *UpdateUserProfileRequest) {
	p.Req = val
}

func (p *UserServiceUpdateProfileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateProfileArgs(%+v)", *p)
}

func (p *UserServiceUpdateProfileArgs) DeepEqual(ano *UserServiceUpdateProfileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceUpdateProfileArgs) Field1DeepEqual(src *UpdateUserProfileRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUpdateProfileArgs = map[int16]string{
	1: "req",
}

type UserServiceUpdateProfileResult struct {
	Success *UpdateUserProfileResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateUserProfileResponse" json:"success,omitempty"`
}

func NewUserServiceUpdateProfileResult() *UserServiceUpdateProfileResult {
	return &UserServiceUpdateProfileResult{}
}

func (p *UserServiceUpdateProfileResult) InitDefault() {
}

var UserServiceUpdateProfileResult_Success_DEFAULT *UpdateUserProfileResponse

func (p *UserServiceUpdateProfileResult) GetSuccess() (v *UpdateUserProfileResponse) {
	if !p.IsSetSuccess() {
		return UserServiceUpdateProfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateProfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateUserProfileResponse)
}

func (p *UserServiceUpdateProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateProfileResult(%+v)", *p)
}

func (p *UserServiceUpdateProfileResult) DeepEqual(ano *UserServiceUpdateProfileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceUpdateProfileResult) Field0DeepEqual(src *UpdateUserProfileResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUpdateProfileResult = map[int16]string{
	0: "success",
}

type UserServiceGetProfileArgs struct {
	Req *GetUserProfileRequest `thrift:"req,1" frugal:"1,default,GetUserProfileRequest" json:"req"`
}

func NewUserServiceGetProfileArgs() *UserServiceGetProfileArgs {
	return &UserServiceGetProfileArgs{}
}

func (p *UserServiceGetProfileArgs) InitDefault() {
}

var UserServiceGetProfileArgs_Req_DEFAULT *GetUserProfileRequest

func (p *UserServiceGetProfileArgs) GetReq() (v *GetUserProfileRequest) {
	if !p.IsSetReq() {
		return UserServiceGetProfileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetProfileArgs) SetReq(val *GetUserProfileRequest) {
	p.Req = val
}

func (p *UserServiceGetProfileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetProfileArgs(%+v)", *p)
}

func (p *UserServiceGetProfileArgs) DeepEqual(ano *UserServiceGetProfileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceGetProfileArgs) Field1DeepEqual(src *GetUserProfileRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceGetProfileArgs = map[int16]string{
	1: "req",
}

type UserServiceGetProfileResult struct {
	Success *GetUserProfileResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserProfileResponse" json:"success,omitempty"`
}

func NewUserServiceGetProfileResult() *UserServiceGetProfileResult {
	return &UserServiceGetProfileResult{}
}

func (p *UserServiceGetProfileResult) InitDefault() {
}

var UserServiceGetProfileResult_Success_DEFAULT *GetUserProfileResponse

func (p *UserServiceGetProfileResult) GetSuccess() (v *GetUserProfileResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetProfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetProfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserProfileResponse)
}

func (p *UserServiceGetProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetProfileResult(%+v)", *p)
}

func (p *UserServiceGetProfileResult) DeepEqual(ano *UserServiceGetProfileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceGetProfileResult) Field0DeepEqual(src *GetUserProfileResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceGetProfileResult = map[int16]string{
	0: "success",
}
