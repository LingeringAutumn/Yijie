// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"strings"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

func (p *BaseResp) DeepEqual(ano *BaseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *BaseResp) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *BaseResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

type UserInfo struct {
	UserId int64  `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
	Name   string `thrift:"name,2" frugal:"2,default,string" json:"name"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

func (p *UserInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserInfo) GetName() (v string) {
	return p.Name
}
func (p *UserInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserInfo) SetName(val string) {
	p.Name = val
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

func (p *UserInfo) DeepEqual(ano *UserInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *UserInfo) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *UserInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "userId",
	2: "name",
}

type LoginData struct {
	UserId int64 `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
}

func NewLoginData() *LoginData {
	return &LoginData{}
}

func (p *LoginData) InitDefault() {
}

func (p *LoginData) GetUserId() (v int64) {
	return p.UserId
}
func (p *LoginData) SetUserId(val int64) {
	p.UserId = val
}

func (p *LoginData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginData(%+v)", *p)
}

func (p *LoginData) DeepEqual(ano *LoginData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *LoginData) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_LoginData = map[int16]string{
	1: "userId",
}

type UserProfileResp struct {
	Username        string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Email           string `thrift:"email,2" frugal:"2,default,string" json:"email"`
	Phone           string `thrift:"phone,3" frugal:"3,default,string" json:"phone"`
	Avatar          string `thrift:"avatar,4" frugal:"4,default,string" json:"avatar"`
	Bio             string `thrift:"bio,5" frugal:"5,default,string" json:"bio"`
	MembershipLevel int64  `thrift:"membershipLevel,6" frugal:"6,default,i64" json:"membershipLevel"`
	Point           int64  `thrift:"point,7" frugal:"7,default,i64" json:"point"`
	Team            string `thrift:"team,8" frugal:"8,default,string" json:"team"`
}

func NewUserProfileResp() *UserProfileResp {
	return &UserProfileResp{}
}

func (p *UserProfileResp) InitDefault() {
}

func (p *UserProfileResp) GetUsername() (v string) {
	return p.Username
}

func (p *UserProfileResp) GetEmail() (v string) {
	return p.Email
}

func (p *UserProfileResp) GetPhone() (v string) {
	return p.Phone
}

func (p *UserProfileResp) GetAvatar() (v string) {
	return p.Avatar
}

func (p *UserProfileResp) GetBio() (v string) {
	return p.Bio
}

func (p *UserProfileResp) GetMembershipLevel() (v int64) {
	return p.MembershipLevel
}

func (p *UserProfileResp) GetPoint() (v int64) {
	return p.Point
}

func (p *UserProfileResp) GetTeam() (v string) {
	return p.Team
}
func (p *UserProfileResp) SetUsername(val string) {
	p.Username = val
}
func (p *UserProfileResp) SetEmail(val string) {
	p.Email = val
}
func (p *UserProfileResp) SetPhone(val string) {
	p.Phone = val
}
func (p *UserProfileResp) SetAvatar(val string) {
	p.Avatar = val
}
func (p *UserProfileResp) SetBio(val string) {
	p.Bio = val
}
func (p *UserProfileResp) SetMembershipLevel(val int64) {
	p.MembershipLevel = val
}
func (p *UserProfileResp) SetPoint(val int64) {
	p.Point = val
}
func (p *UserProfileResp) SetTeam(val string) {
	p.Team = val
}

func (p *UserProfileResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserProfileResp(%+v)", *p)
}

func (p *UserProfileResp) DeepEqual(ano *UserProfileResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Email) {
		return false
	}
	if !p.Field3DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field4DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field5DeepEqual(ano.Bio) {
		return false
	}
	if !p.Field6DeepEqual(ano.MembershipLevel) {
		return false
	}
	if !p.Field7DeepEqual(ano.Point) {
		return false
	}
	if !p.Field8DeepEqual(ano.Team) {
		return false
	}
	return true
}

func (p *UserProfileResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Phone, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Bio, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field6DeepEqual(src int64) bool {

	if p.MembershipLevel != src {
		return false
	}
	return true
}
func (p *UserProfileResp) Field7DeepEqual(src int64) bool {

	if p.Point != src {
		return false
	}
	return true
}
func (p *UserProfileResp) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Team, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserProfileResp = map[int16]string{
	1: "username",
	2: "email",
	3: "phone",
	4: "avatar",
	5: "bio",
	6: "membershipLevel",
	7: "point",
	8: "team",
}

type UserProfileReq struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Email    string `thrift:"email,2" frugal:"2,default,string" json:"email"`
	Phone    string `thrift:"phone,3" frugal:"3,default,string" json:"phone"`
	Avatar   []byte `thrift:"avatar,4" frugal:"4,default,binary" json:"avatar"`
	Bio      string `thrift:"bio,5" frugal:"5,default,string" json:"bio"`
}

func NewUserProfileReq() *UserProfileReq {
	return &UserProfileReq{}
}

func (p *UserProfileReq) InitDefault() {
}

func (p *UserProfileReq) GetUsername() (v string) {
	return p.Username
}

func (p *UserProfileReq) GetEmail() (v string) {
	return p.Email
}

func (p *UserProfileReq) GetPhone() (v string) {
	return p.Phone
}

func (p *UserProfileReq) GetAvatar() (v []byte) {
	return p.Avatar
}

func (p *UserProfileReq) GetBio() (v string) {
	return p.Bio
}
func (p *UserProfileReq) SetUsername(val string) {
	p.Username = val
}
func (p *UserProfileReq) SetEmail(val string) {
	p.Email = val
}
func (p *UserProfileReq) SetPhone(val string) {
	p.Phone = val
}
func (p *UserProfileReq) SetAvatar(val []byte) {
	p.Avatar = val
}
func (p *UserProfileReq) SetBio(val string) {
	p.Bio = val
}

func (p *UserProfileReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserProfileReq(%+v)", *p)
}

func (p *UserProfileReq) DeepEqual(ano *UserProfileReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Email) {
		return false
	}
	if !p.Field3DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field4DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field5DeepEqual(ano.Bio) {
		return false
	}
	return true
}

func (p *UserProfileReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Phone, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileReq) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Bio, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserProfileReq = map[int16]string{
	1: "username",
	2: "email",
	3: "phone",
	4: "avatar",
	5: "bio",
}

type Image struct {
	ImageId  int64  `thrift:"imageId,1,required" frugal:"1,required,i64" json:"imageId"`
	ImageUrl string `thrift:"imageUrl,2,required" frugal:"2,required,string" json:"imageUrl"`
}

func NewImage() *Image {
	return &Image{}
}

func (p *Image) InitDefault() {
}

func (p *Image) GetImageId() (v int64) {
	return p.ImageId
}

func (p *Image) GetImageUrl() (v string) {
	return p.ImageUrl
}
func (p *Image) SetImageId(val int64) {
	p.ImageId = val
}
func (p *Image) SetImageUrl(val string) {
	p.ImageUrl = val
}

func (p *Image) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Image(%+v)", *p)
}

func (p *Image) DeepEqual(ano *Image) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ImageId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ImageUrl) {
		return false
	}
	return true
}

func (p *Image) Field1DeepEqual(src int64) bool {

	if p.ImageId != src {
		return false
	}
	return true
}
func (p *Image) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ImageUrl, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_Image = map[int16]string{
	1: "imageId",
	2: "imageUrl",
}

type Video struct {
	VideoId         int64   `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	UserId          int64   `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	Title           string  `thrift:"title,3" frugal:"3,default,string" json:"title"`
	Description     string  `thrift:"description,4" frugal:"4,default,string" json:"description"`
	CoverUrl        string  `thrift:"cover_url,5" frugal:"5,default,string" json:"cover_url"`
	VideoUrl        string  `thrift:"video_url,6" frugal:"6,default,string" json:"video_url"`
	DurationSeconds int64   `thrift:"duration_seconds,7" frugal:"7,default,i64" json:"duration_seconds"`
	Views           int64   `thrift:"views,8" frugal:"8,default,i64" json:"views"`
	Likes           int64   `thrift:"likes,9" frugal:"9,default,i64" json:"likes"`
	Comments        int64   `thrift:"comments,10" frugal:"10,default,i64" json:"comments"`
	HotScore        float64 `thrift:"hot_score,11" frugal:"11,default,double" json:"hot_score"`
	CreatedAt       int64   `thrift:"created_at,12" frugal:"12,default,i64" json:"created_at"`
}

func NewVideo() *Video {
	return &Video{}
}

func (p *Video) InitDefault() {
}

func (p *Video) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *Video) GetUserId() (v int64) {
	return p.UserId
}

func (p *Video) GetTitle() (v string) {
	return p.Title
}

func (p *Video) GetDescription() (v string) {
	return p.Description
}

func (p *Video) GetCoverUrl() (v string) {
	return p.CoverUrl
}

func (p *Video) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *Video) GetDurationSeconds() (v int64) {
	return p.DurationSeconds
}

func (p *Video) GetViews() (v int64) {
	return p.Views
}

func (p *Video) GetLikes() (v int64) {
	return p.Likes
}

func (p *Video) GetComments() (v int64) {
	return p.Comments
}

func (p *Video) GetHotScore() (v float64) {
	return p.HotScore
}

func (p *Video) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *Video) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *Video) SetUserId(val int64) {
	p.UserId = val
}
func (p *Video) SetTitle(val string) {
	p.Title = val
}
func (p *Video) SetDescription(val string) {
	p.Description = val
}
func (p *Video) SetCoverUrl(val string) {
	p.CoverUrl = val
}
func (p *Video) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *Video) SetDurationSeconds(val int64) {
	p.DurationSeconds = val
}
func (p *Video) SetViews(val int64) {
	p.Views = val
}
func (p *Video) SetLikes(val int64) {
	p.Likes = val
}
func (p *Video) SetComments(val int64) {
	p.Comments = val
}
func (p *Video) SetHotScore(val float64) {
	p.HotScore = val
}
func (p *Video) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *Video) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Video(%+v)", *p)
}

func (p *Video) DeepEqual(ano *Video) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Title) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.CoverUrl) {
		return false
	}
	if !p.Field6DeepEqual(ano.VideoUrl) {
		return false
	}
	if !p.Field7DeepEqual(ano.DurationSeconds) {
		return false
	}
	if !p.Field8DeepEqual(ano.Views) {
		return false
	}
	if !p.Field9DeepEqual(ano.Likes) {
		return false
	}
	if !p.Field10DeepEqual(ano.Comments) {
		return false
	}
	if !p.Field11DeepEqual(ano.HotScore) {
		return false
	}
	if !p.Field12DeepEqual(ano.CreatedAt) {
		return false
	}
	return true
}

func (p *Video) Field1DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}
func (p *Video) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *Video) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CoverUrl, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field6DeepEqual(src string) bool {

	if strings.Compare(p.VideoUrl, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field7DeepEqual(src int64) bool {

	if p.DurationSeconds != src {
		return false
	}
	return true
}
func (p *Video) Field8DeepEqual(src int64) bool {

	if p.Views != src {
		return false
	}
	return true
}
func (p *Video) Field9DeepEqual(src int64) bool {

	if p.Likes != src {
		return false
	}
	return true
}
func (p *Video) Field10DeepEqual(src int64) bool {

	if p.Comments != src {
		return false
	}
	return true
}
func (p *Video) Field11DeepEqual(src float64) bool {

	if p.HotScore != src {
		return false
	}
	return true
}
func (p *Video) Field12DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}

var fieldIDToName_Video = map[int16]string{
	1:  "video_id",
	2:  "user_id",
	3:  "title",
	4:  "description",
	5:  "cover_url",
	6:  "video_url",
	7:  "duration_seconds",
	8:  "views",
	9:  "likes",
	10: "comments",
	11: "hot_score",
	12: "created_at",
}
