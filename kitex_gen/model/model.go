// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

func (p *BaseResp) DeepEqual(ano *BaseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *BaseResp) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *BaseResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

type UserInfo struct {
	UserId int64  `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
	Name   string `thrift:"name,2" frugal:"2,default,string" json:"name"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

func (p *UserInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserInfo) GetName() (v string) {
	return p.Name
}
func (p *UserInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserInfo) SetName(val string) {
	p.Name = val
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

func (p *UserInfo) DeepEqual(ano *UserInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *UserInfo) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *UserInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "userId",
	2: "name",
}

type LoginData struct {
	UserId int64 `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
}

func NewLoginData() *LoginData {
	return &LoginData{}
}

func (p *LoginData) InitDefault() {
}

func (p *LoginData) GetUserId() (v int64) {
	return p.UserId
}
func (p *LoginData) SetUserId(val int64) {
	p.UserId = val
}

func (p *LoginData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginData(%+v)", *p)
}

func (p *LoginData) DeepEqual(ano *LoginData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *LoginData) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_LoginData = map[int16]string{
	1: "userId",
}

type UserProfile struct {
	Username        string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Email           string `thrift:"email,2" frugal:"2,default,string" json:"email"`
	Phone           string `thrift:"phone,3" frugal:"3,default,string" json:"phone"`
	Avatar          int64  `thrift:"avatar,4" frugal:"4,default,i64" json:"avatar"`
	Bio             string `thrift:"bio,5" frugal:"5,default,string" json:"bio"`
	MembershipLevel int64  `thrift:"membershipLevel,6" frugal:"6,default,i64" json:"membershipLevel"`
	Point           int64  `thrift:"point,7" frugal:"7,default,i64" json:"point"`
	Team            string `thrift:"team,8" frugal:"8,default,string" json:"team"`
}

func NewUserProfile() *UserProfile {
	return &UserProfile{}
}

func (p *UserProfile) InitDefault() {
}

func (p *UserProfile) GetUsername() (v string) {
	return p.Username
}

func (p *UserProfile) GetEmail() (v string) {
	return p.Email
}

func (p *UserProfile) GetPhone() (v string) {
	return p.Phone
}

func (p *UserProfile) GetAvatar() (v int64) {
	return p.Avatar
}

func (p *UserProfile) GetBio() (v string) {
	return p.Bio
}

func (p *UserProfile) GetMembershipLevel() (v int64) {
	return p.MembershipLevel
}

func (p *UserProfile) GetPoint() (v int64) {
	return p.Point
}

func (p *UserProfile) GetTeam() (v string) {
	return p.Team
}
func (p *UserProfile) SetUsername(val string) {
	p.Username = val
}
func (p *UserProfile) SetEmail(val string) {
	p.Email = val
}
func (p *UserProfile) SetPhone(val string) {
	p.Phone = val
}
func (p *UserProfile) SetAvatar(val int64) {
	p.Avatar = val
}
func (p *UserProfile) SetBio(val string) {
	p.Bio = val
}
func (p *UserProfile) SetMembershipLevel(val int64) {
	p.MembershipLevel = val
}
func (p *UserProfile) SetPoint(val int64) {
	p.Point = val
}
func (p *UserProfile) SetTeam(val string) {
	p.Team = val
}

func (p *UserProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserProfile(%+v)", *p)
}

func (p *UserProfile) DeepEqual(ano *UserProfile) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Email) {
		return false
	}
	if !p.Field3DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field4DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field5DeepEqual(ano.Bio) {
		return false
	}
	if !p.Field6DeepEqual(ano.MembershipLevel) {
		return false
	}
	if !p.Field7DeepEqual(ano.Point) {
		return false
	}
	if !p.Field8DeepEqual(ano.Team) {
		return false
	}
	return true
}

func (p *UserProfile) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfile) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfile) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Phone, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfile) Field4DeepEqual(src int64) bool {

	if p.Avatar != src {
		return false
	}
	return true
}
func (p *UserProfile) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Bio, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfile) Field6DeepEqual(src int64) bool {

	if p.MembershipLevel != src {
		return false
	}
	return true
}
func (p *UserProfile) Field7DeepEqual(src int64) bool {

	if p.Point != src {
		return false
	}
	return true
}
func (p *UserProfile) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Team, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserProfile = map[int16]string{
	1: "username",
	2: "email",
	3: "phone",
	4: "avatar",
	5: "bio",
	6: "membershipLevel",
	7: "point",
	8: "team",
}

type Image struct {
	ImageId  int64  `thrift:"imageId,1,required" frugal:"1,required,i64" json:"imageId"`
	ImageUrl string `thrift:"imageUrl,2,required" frugal:"2,required,string" json:"imageUrl"`
}

func NewImage() *Image {
	return &Image{}
}

func (p *Image) InitDefault() {
}

func (p *Image) GetImageId() (v int64) {
	return p.ImageId
}

func (p *Image) GetImageUrl() (v string) {
	return p.ImageUrl
}
func (p *Image) SetImageId(val int64) {
	p.ImageId = val
}
func (p *Image) SetImageUrl(val string) {
	p.ImageUrl = val
}

func (p *Image) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Image(%+v)", *p)
}

func (p *Image) DeepEqual(ano *Image) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ImageId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ImageUrl) {
		return false
	}
	return true
}

func (p *Image) Field1DeepEqual(src int64) bool {

	if p.ImageId != src {
		return false
	}
	return true
}
func (p *Image) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ImageUrl, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_Image = map[int16]string{
	1: "imageId",
	2: "imageUrl",
}
