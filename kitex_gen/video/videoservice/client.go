// Code generated by Kitex v0.12.3. DO NOT EDIT.

package videoservice

import (
	"context"

	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"

	video "github.com/LingeringAutumn/Yijie/kitex_gen/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SubmitVideo(ctx context.Context, req *video.VideoSubmissionRequest, callOptions ...callopt.Option) (r *video.VideoSubmissionResponse, err error)
	GetVideo(ctx context.Context, req *video.VideoDetailRequest, callOptions ...callopt.Option) (r *video.VideoDetailResponse, err error)
	SearchVideo(ctx context.Context, req *video.VideoSearchRequest, callOptions ...callopt.Option) (r *video.VideoSearchResponse, err error)
	TrendVideo(ctx context.Context, req *video.VideoTrendingRequest, callOptions ...callopt.Option) (r *video.VideoTrendingResponse, err error)
	UpdateVideoHot(ctx context.Context, req *video.VideoHotUpdateRequest, callOptions ...callopt.Option) (r *video.VideoHotUpdateResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) SubmitVideo(ctx context.Context, req *video.VideoSubmissionRequest, callOptions ...callopt.Option) (r *video.VideoSubmissionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitVideo(ctx, req)
}

func (p *kVideoServiceClient) GetVideo(ctx context.Context, req *video.VideoDetailRequest, callOptions ...callopt.Option) (r *video.VideoDetailResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideo(ctx, req)
}

func (p *kVideoServiceClient) SearchVideo(ctx context.Context, req *video.VideoSearchRequest, callOptions ...callopt.Option) (r *video.VideoSearchResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchVideo(ctx, req)
}

func (p *kVideoServiceClient) TrendVideo(ctx context.Context, req *video.VideoTrendingRequest, callOptions ...callopt.Option) (r *video.VideoTrendingResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TrendVideo(ctx, req)
}

func (p *kVideoServiceClient) UpdateVideoHot(ctx context.Context, req *video.VideoHotUpdateRequest, callOptions ...callopt.Option) (r *video.VideoHotUpdateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoHot(ctx, req)
}
