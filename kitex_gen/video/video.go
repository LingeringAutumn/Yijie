// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package video

import (
	"context"
	"fmt"
	"github.com/LingeringAutumn/Yijie/kitex_gen/model"
	"strings"
)

type VideoSubmissionRequest struct {
	UserId          int64   `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	Title           string  `thrift:"title,2,required" frugal:"2,required,string" json:"title"`
	Description     *string `thrift:"description,3,optional" frugal:"3,optional,string" json:"description,omitempty"`
	CoverUrl        *string `thrift:"cover_url,4,optional" frugal:"4,optional,string" json:"cover_url,omitempty"`
	VideoUrl        string  `thrift:"video_url,5,required" frugal:"5,required,string" json:"video_url"`
	DurationSeconds int64   `thrift:"duration_seconds,6,required" frugal:"6,required,i64" json:"duration_seconds"`
}

func NewVideoSubmissionRequest() *VideoSubmissionRequest {
	return &VideoSubmissionRequest{}
}

func (p *VideoSubmissionRequest) InitDefault() {
}

func (p *VideoSubmissionRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoSubmissionRequest) GetTitle() (v string) {
	return p.Title
}

var VideoSubmissionRequest_Description_DEFAULT string

func (p *VideoSubmissionRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return VideoSubmissionRequest_Description_DEFAULT
	}
	return *p.Description
}

var VideoSubmissionRequest_CoverUrl_DEFAULT string

func (p *VideoSubmissionRequest) GetCoverUrl() (v string) {
	if !p.IsSetCoverUrl() {
		return VideoSubmissionRequest_CoverUrl_DEFAULT
	}
	return *p.CoverUrl
}

func (p *VideoSubmissionRequest) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *VideoSubmissionRequest) GetDurationSeconds() (v int64) {
	return p.DurationSeconds
}
func (p *VideoSubmissionRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoSubmissionRequest) SetTitle(val string) {
	p.Title = val
}
func (p *VideoSubmissionRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *VideoSubmissionRequest) SetCoverUrl(val *string) {
	p.CoverUrl = val
}
func (p *VideoSubmissionRequest) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *VideoSubmissionRequest) SetDurationSeconds(val int64) {
	p.DurationSeconds = val
}

func (p *VideoSubmissionRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *VideoSubmissionRequest) IsSetCoverUrl() bool {
	return p.CoverUrl != nil
}

func (p *VideoSubmissionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSubmissionRequest(%+v)", *p)
}

func (p *VideoSubmissionRequest) DeepEqual(ano *VideoSubmissionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Title) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.CoverUrl) {
		return false
	}
	if !p.Field5DeepEqual(ano.VideoUrl) {
		return false
	}
	if !p.Field6DeepEqual(ano.DurationSeconds) {
		return false
	}
	return true
}

func (p *VideoSubmissionRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *VideoSubmissionRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionRequest) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionRequest) Field4DeepEqual(src *string) bool {

	if p.CoverUrl == src {
		return true
	} else if p.CoverUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CoverUrl, *src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.VideoUrl, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionRequest) Field6DeepEqual(src int64) bool {

	if p.DurationSeconds != src {
		return false
	}
	return true
}

var fieldIDToName_VideoSubmissionRequest = map[int16]string{
	1: "user_id",
	2: "title",
	3: "description",
	4: "cover_url",
	5: "video_url",
	6: "duration_seconds",
}

type VideoSubmissionResponse struct {
	BaseResp *model.BaseResp `thrift:"base_resp,1,required" frugal:"1,required,model.BaseResp" json:"base_resp"`
	VideoId  int64           `thrift:"video_id,2,required" frugal:"2,required,i64" json:"video_id"`
	VideoUrl string          `thrift:"video_url,3,required" frugal:"3,required,string" json:"video_url"`
}

func NewVideoSubmissionResponse() *VideoSubmissionResponse {
	return &VideoSubmissionResponse{}
}

func (p *VideoSubmissionResponse) InitDefault() {
}

var VideoSubmissionResponse_BaseResp_DEFAULT *model.BaseResp

func (p *VideoSubmissionResponse) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return VideoSubmissionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *VideoSubmissionResponse) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoSubmissionResponse) GetVideoUrl() (v string) {
	return p.VideoUrl
}
func (p *VideoSubmissionResponse) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}
func (p *VideoSubmissionResponse) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoSubmissionResponse) SetVideoUrl(val string) {
	p.VideoUrl = val
}

func (p *VideoSubmissionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *VideoSubmissionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSubmissionResponse(%+v)", *p)
}

func (p *VideoSubmissionResponse) DeepEqual(ano *VideoSubmissionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field3DeepEqual(ano.VideoUrl) {
		return false
	}
	return true
}

func (p *VideoSubmissionResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoSubmissionResponse) Field2DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}
func (p *VideoSubmissionResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.VideoUrl, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_VideoSubmissionResponse = map[int16]string{
	1: "base_resp",
	2: "video_id",
	3: "video_url",
}

type VideoDetailRequest struct {
	VideoId int64 `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
}

func NewVideoDetailRequest() *VideoDetailRequest {
	return &VideoDetailRequest{}
}

func (p *VideoDetailRequest) InitDefault() {
}

func (p *VideoDetailRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *VideoDetailRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *VideoDetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoDetailRequest(%+v)", *p)
}

func (p *VideoDetailRequest) DeepEqual(ano *VideoDetailRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	return true
}

func (p *VideoDetailRequest) Field1DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}

var fieldIDToName_VideoDetailRequest = map[int16]string{
	1: "video_id",
}

type VideoDetailResponse struct {
	BaseResp *model.BaseResp `thrift:"base_resp,1,required" frugal:"1,required,model.BaseResp" json:"base_resp"`
	Video    *model.Video    `thrift:"video,2,required" frugal:"2,required,model.Video" json:"video"`
}

func NewVideoDetailResponse() *VideoDetailResponse {
	return &VideoDetailResponse{}
}

func (p *VideoDetailResponse) InitDefault() {
}

var VideoDetailResponse_BaseResp_DEFAULT *model.BaseResp

func (p *VideoDetailResponse) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return VideoDetailResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var VideoDetailResponse_Video_DEFAULT *model.Video

func (p *VideoDetailResponse) GetVideo() (v *model.Video) {
	if !p.IsSetVideo() {
		return VideoDetailResponse_Video_DEFAULT
	}
	return p.Video
}
func (p *VideoDetailResponse) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}
func (p *VideoDetailResponse) SetVideo(val *model.Video) {
	p.Video = val
}

func (p *VideoDetailResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *VideoDetailResponse) IsSetVideo() bool {
	return p.Video != nil
}

func (p *VideoDetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoDetailResponse(%+v)", *p)
}

func (p *VideoDetailResponse) DeepEqual(ano *VideoDetailResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Video) {
		return false
	}
	return true
}

func (p *VideoDetailResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoDetailResponse) Field2DeepEqual(src *model.Video) bool {

	if !p.Video.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoDetailResponse = map[int16]string{
	1: "base_resp",
	2: "video",
}

type VideoSearchRequest struct {
	Keyword  string   `thrift:"keyword,1,required" frugal:"1,required,string" json:"keyword"`
	Tags     []string `thrift:"tags,2,optional" frugal:"2,optional,list<string>" json:"tags,omitempty"`
	PageNum  int64    `thrift:"page_num,3,required" frugal:"3,required,i64" json:"page_num"`
	PageSize int64    `thrift:"page_size,4,required" frugal:"4,required,i64" json:"page_size"`
}

func NewVideoSearchRequest() *VideoSearchRequest {
	return &VideoSearchRequest{}
}

func (p *VideoSearchRequest) InitDefault() {
}

func (p *VideoSearchRequest) GetKeyword() (v string) {
	return p.Keyword
}

var VideoSearchRequest_Tags_DEFAULT []string

func (p *VideoSearchRequest) GetTags() (v []string) {
	if !p.IsSetTags() {
		return VideoSearchRequest_Tags_DEFAULT
	}
	return p.Tags
}

func (p *VideoSearchRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoSearchRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *VideoSearchRequest) SetKeyword(val string) {
	p.Keyword = val
}
func (p *VideoSearchRequest) SetTags(val []string) {
	p.Tags = val
}
func (p *VideoSearchRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoSearchRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *VideoSearchRequest) IsSetTags() bool {
	return p.Tags != nil
}

func (p *VideoSearchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchRequest(%+v)", *p)
}

func (p *VideoSearchRequest) DeepEqual(ano *VideoSearchRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Keyword) {
		return false
	}
	if !p.Field2DeepEqual(ano.Tags) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoSearchRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Keyword, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSearchRequest) Field2DeepEqual(src []string) bool {

	if len(p.Tags) != len(src) {
		return false
	}
	for i, v := range p.Tags {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoSearchRequest) Field3DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoSearchRequest) Field4DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_VideoSearchRequest = map[int16]string{
	1: "keyword",
	2: "tags",
	3: "page_num",
	4: "page_size",
}

type VideoSearchResponse struct {
	BaseResp *model.BaseResp `thrift:"base_resp,1,required" frugal:"1,required,model.BaseResp" json:"base_resp"`
	Videos   []*model.Video  `thrift:"videos,2,required" frugal:"2,required,list<model.Video>" json:"videos"`
}

func NewVideoSearchResponse() *VideoSearchResponse {
	return &VideoSearchResponse{}
}

func (p *VideoSearchResponse) InitDefault() {
}

var VideoSearchResponse_BaseResp_DEFAULT *model.BaseResp

func (p *VideoSearchResponse) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return VideoSearchResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *VideoSearchResponse) GetVideos() (v []*model.Video) {
	return p.Videos
}
func (p *VideoSearchResponse) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}
func (p *VideoSearchResponse) SetVideos(val []*model.Video) {
	p.Videos = val
}

func (p *VideoSearchResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *VideoSearchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchResponse(%+v)", *p)
}

func (p *VideoSearchResponse) DeepEqual(ano *VideoSearchResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Videos) {
		return false
	}
	return true
}

func (p *VideoSearchResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoSearchResponse) Field2DeepEqual(src []*model.Video) bool {

	if len(p.Videos) != len(src) {
		return false
	}
	for i, v := range p.Videos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_VideoSearchResponse = map[int16]string{
	1: "base_resp",
	2: "videos",
}

type VideoTrendingRequest struct {
	PageNum  int64 `thrift:"page_num,1,required" frugal:"1,required,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2,required" frugal:"2,required,i64" json:"page_size"`
}

func NewVideoTrendingRequest() *VideoTrendingRequest {
	return &VideoTrendingRequest{}
}

func (p *VideoTrendingRequest) InitDefault() {
}

func (p *VideoTrendingRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoTrendingRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *VideoTrendingRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoTrendingRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *VideoTrendingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTrendingRequest(%+v)", *p)
}

func (p *VideoTrendingRequest) DeepEqual(ano *VideoTrendingRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoTrendingRequest) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoTrendingRequest) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_VideoTrendingRequest = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type VideoTrendingResponse struct {
	BaseResp *model.BaseResp `thrift:"base_resp,1,required" frugal:"1,required,model.BaseResp" json:"base_resp"`
	Videos   []*model.Video  `thrift:"videos,2,required" frugal:"2,required,list<model.Video>" json:"videos"`
}

func NewVideoTrendingResponse() *VideoTrendingResponse {
	return &VideoTrendingResponse{}
}

func (p *VideoTrendingResponse) InitDefault() {
}

var VideoTrendingResponse_BaseResp_DEFAULT *model.BaseResp

func (p *VideoTrendingResponse) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return VideoTrendingResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *VideoTrendingResponse) GetVideos() (v []*model.Video) {
	return p.Videos
}
func (p *VideoTrendingResponse) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}
func (p *VideoTrendingResponse) SetVideos(val []*model.Video) {
	p.Videos = val
}

func (p *VideoTrendingResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *VideoTrendingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTrendingResponse(%+v)", *p)
}

func (p *VideoTrendingResponse) DeepEqual(ano *VideoTrendingResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Videos) {
		return false
	}
	return true
}

func (p *VideoTrendingResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoTrendingResponse) Field2DeepEqual(src []*model.Video) bool {

	if len(p.Videos) != len(src) {
		return false
	}
	for i, v := range p.Videos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_VideoTrendingResponse = map[int16]string{
	1: "base_resp",
	2: "videos",
}

type VideoService interface {
	SubmitVideo(ctx context.Context, req *VideoSubmissionRequest) (r *VideoSubmissionResponse, err error)

	GetVideo(ctx context.Context, req *VideoDetailRequest) (r *VideoDetailResponse, err error)

	SearchVideo(ctx context.Context, req *VideoSearchRequest) (r *VideoSearchResponse, err error)

	TrendingVideo(ctx context.Context, req *VideoTrendingRequest) (r *VideoTrendingResponse, err error)
}

type VideoServiceSubmitVideoArgs struct {
	Req *VideoSubmissionRequest `thrift:"req,1" frugal:"1,default,VideoSubmissionRequest" json:"req"`
}

func NewVideoServiceSubmitVideoArgs() *VideoServiceSubmitVideoArgs {
	return &VideoServiceSubmitVideoArgs{}
}

func (p *VideoServiceSubmitVideoArgs) InitDefault() {
}

var VideoServiceSubmitVideoArgs_Req_DEFAULT *VideoSubmissionRequest

func (p *VideoServiceSubmitVideoArgs) GetReq() (v *VideoSubmissionRequest) {
	if !p.IsSetReq() {
		return VideoServiceSubmitVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceSubmitVideoArgs) SetReq(val *VideoSubmissionRequest) {
	p.Req = val
}

func (p *VideoServiceSubmitVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceSubmitVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSubmitVideoArgs(%+v)", *p)
}

func (p *VideoServiceSubmitVideoArgs) DeepEqual(ano *VideoServiceSubmitVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceSubmitVideoArgs) Field1DeepEqual(src *VideoSubmissionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceSubmitVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceSubmitVideoResult struct {
	Success *VideoSubmissionResponse `thrift:"success,0,optional" frugal:"0,optional,VideoSubmissionResponse" json:"success,omitempty"`
}

func NewVideoServiceSubmitVideoResult() *VideoServiceSubmitVideoResult {
	return &VideoServiceSubmitVideoResult{}
}

func (p *VideoServiceSubmitVideoResult) InitDefault() {
}

var VideoServiceSubmitVideoResult_Success_DEFAULT *VideoSubmissionResponse

func (p *VideoServiceSubmitVideoResult) GetSuccess() (v *VideoSubmissionResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceSubmitVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceSubmitVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoSubmissionResponse)
}

func (p *VideoServiceSubmitVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceSubmitVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSubmitVideoResult(%+v)", *p)
}

func (p *VideoServiceSubmitVideoResult) DeepEqual(ano *VideoServiceSubmitVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceSubmitVideoResult) Field0DeepEqual(src *VideoSubmissionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceSubmitVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceGetVideoArgs struct {
	Req *VideoDetailRequest `thrift:"req,1" frugal:"1,default,VideoDetailRequest" json:"req"`
}

func NewVideoServiceGetVideoArgs() *VideoServiceGetVideoArgs {
	return &VideoServiceGetVideoArgs{}
}

func (p *VideoServiceGetVideoArgs) InitDefault() {
}

var VideoServiceGetVideoArgs_Req_DEFAULT *VideoDetailRequest

func (p *VideoServiceGetVideoArgs) GetReq() (v *VideoDetailRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetVideoArgs) SetReq(val *VideoDetailRequest) {
	p.Req = val
}

func (p *VideoServiceGetVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoArgs(%+v)", *p)
}

func (p *VideoServiceGetVideoArgs) DeepEqual(ano *VideoServiceGetVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceGetVideoArgs) Field1DeepEqual(src *VideoDetailRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceGetVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetVideoResult struct {
	Success *VideoDetailResponse `thrift:"success,0,optional" frugal:"0,optional,VideoDetailResponse" json:"success,omitempty"`
}

func NewVideoServiceGetVideoResult() *VideoServiceGetVideoResult {
	return &VideoServiceGetVideoResult{}
}

func (p *VideoServiceGetVideoResult) InitDefault() {
}

var VideoServiceGetVideoResult_Success_DEFAULT *VideoDetailResponse

func (p *VideoServiceGetVideoResult) GetSuccess() (v *VideoDetailResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoDetailResponse)
}

func (p *VideoServiceGetVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoResult(%+v)", *p)
}

func (p *VideoServiceGetVideoResult) DeepEqual(ano *VideoServiceGetVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceGetVideoResult) Field0DeepEqual(src *VideoDetailResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceGetVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceSearchVideoArgs struct {
	Req *VideoSearchRequest `thrift:"req,1" frugal:"1,default,VideoSearchRequest" json:"req"`
}

func NewVideoServiceSearchVideoArgs() *VideoServiceSearchVideoArgs {
	return &VideoServiceSearchVideoArgs{}
}

func (p *VideoServiceSearchVideoArgs) InitDefault() {
}

var VideoServiceSearchVideoArgs_Req_DEFAULT *VideoSearchRequest

func (p *VideoServiceSearchVideoArgs) GetReq() (v *VideoSearchRequest) {
	if !p.IsSetReq() {
		return VideoServiceSearchVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceSearchVideoArgs) SetReq(val *VideoSearchRequest) {
	p.Req = val
}

func (p *VideoServiceSearchVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceSearchVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSearchVideoArgs(%+v)", *p)
}

func (p *VideoServiceSearchVideoArgs) DeepEqual(ano *VideoServiceSearchVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceSearchVideoArgs) Field1DeepEqual(src *VideoSearchRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceSearchVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceSearchVideoResult struct {
	Success *VideoSearchResponse `thrift:"success,0,optional" frugal:"0,optional,VideoSearchResponse" json:"success,omitempty"`
}

func NewVideoServiceSearchVideoResult() *VideoServiceSearchVideoResult {
	return &VideoServiceSearchVideoResult{}
}

func (p *VideoServiceSearchVideoResult) InitDefault() {
}

var VideoServiceSearchVideoResult_Success_DEFAULT *VideoSearchResponse

func (p *VideoServiceSearchVideoResult) GetSuccess() (v *VideoSearchResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceSearchVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceSearchVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoSearchResponse)
}

func (p *VideoServiceSearchVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceSearchVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSearchVideoResult(%+v)", *p)
}

func (p *VideoServiceSearchVideoResult) DeepEqual(ano *VideoServiceSearchVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceSearchVideoResult) Field0DeepEqual(src *VideoSearchResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceSearchVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceTrendingVideoArgs struct {
	Req *VideoTrendingRequest `thrift:"req,1" frugal:"1,default,VideoTrendingRequest" json:"req"`
}

func NewVideoServiceTrendingVideoArgs() *VideoServiceTrendingVideoArgs {
	return &VideoServiceTrendingVideoArgs{}
}

func (p *VideoServiceTrendingVideoArgs) InitDefault() {
}

var VideoServiceTrendingVideoArgs_Req_DEFAULT *VideoTrendingRequest

func (p *VideoServiceTrendingVideoArgs) GetReq() (v *VideoTrendingRequest) {
	if !p.IsSetReq() {
		return VideoServiceTrendingVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceTrendingVideoArgs) SetReq(val *VideoTrendingRequest) {
	p.Req = val
}

func (p *VideoServiceTrendingVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceTrendingVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceTrendingVideoArgs(%+v)", *p)
}

func (p *VideoServiceTrendingVideoArgs) DeepEqual(ano *VideoServiceTrendingVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceTrendingVideoArgs) Field1DeepEqual(src *VideoTrendingRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceTrendingVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceTrendingVideoResult struct {
	Success *VideoTrendingResponse `thrift:"success,0,optional" frugal:"0,optional,VideoTrendingResponse" json:"success,omitempty"`
}

func NewVideoServiceTrendingVideoResult() *VideoServiceTrendingVideoResult {
	return &VideoServiceTrendingVideoResult{}
}

func (p *VideoServiceTrendingVideoResult) InitDefault() {
}

var VideoServiceTrendingVideoResult_Success_DEFAULT *VideoTrendingResponse

func (p *VideoServiceTrendingVideoResult) GetSuccess() (v *VideoTrendingResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceTrendingVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceTrendingVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoTrendingResponse)
}

func (p *VideoServiceTrendingVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceTrendingVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceTrendingVideoResult(%+v)", *p)
}

func (p *VideoServiceTrendingVideoResult) DeepEqual(ano *VideoServiceTrendingVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceTrendingVideoResult) Field0DeepEqual(src *VideoTrendingResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceTrendingVideoResult = map[int16]string{
	0: "success",
}
