// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package user_behaviour

import (
	"context"
	"fmt"
	"github.com/LingeringAutumn/Yijie/kitex_gen/model"
)

type VideoLikeRequest struct {
	VideoId int64 `thrift:"video_id,1,required" frugal:"1,required,i64" json:"video_id"`
	UserId  int64 `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
	IsLike  bool  `thrift:"is_like,3,required" frugal:"3,required,bool" json:"is_like"`
}

func NewVideoLikeRequest() *VideoLikeRequest {
	return &VideoLikeRequest{}
}

func (p *VideoLikeRequest) InitDefault() {
}

func (p *VideoLikeRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoLikeRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoLikeRequest) GetIsLike() (v bool) {
	return p.IsLike
}
func (p *VideoLikeRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoLikeRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoLikeRequest) SetIsLike(val bool) {
	p.IsLike = val
}

func (p *VideoLikeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoLikeRequest(%+v)", *p)
}

func (p *VideoLikeRequest) DeepEqual(ano *VideoLikeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsLike) {
		return false
	}
	return true
}

func (p *VideoLikeRequest) Field1DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}
func (p *VideoLikeRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *VideoLikeRequest) Field3DeepEqual(src bool) bool {

	if p.IsLike != src {
		return false
	}
	return true
}

var fieldIDToName_VideoLikeRequest = map[int16]string{
	1: "video_id",
	2: "user_id",
	3: "is_like",
}

type VideoLikeResponse struct {
	BaseResp *model.BaseResp `thrift:"base_resp,1,required" frugal:"1,required,model.BaseResp" json:"base_resp"`
}

func NewVideoLikeResponse() *VideoLikeResponse {
	return &VideoLikeResponse{}
}

func (p *VideoLikeResponse) InitDefault() {
}

var VideoLikeResponse_BaseResp_DEFAULT *model.BaseResp

func (p *VideoLikeResponse) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return VideoLikeResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *VideoLikeResponse) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}

func (p *VideoLikeResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *VideoLikeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoLikeResponse(%+v)", *p)
}

func (p *VideoLikeResponse) DeepEqual(ano *VideoLikeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *VideoLikeResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoLikeResponse = map[int16]string{
	1: "base_resp",
}

type LikeService interface {
	LikeVideo(ctx context.Context, req *VideoLikeRequest) (r *VideoLikeResponse, err error)
}

type LikeServiceLikeVideoArgs struct {
	Req *VideoLikeRequest `thrift:"req,1" frugal:"1,default,VideoLikeRequest" json:"req"`
}

func NewLikeServiceLikeVideoArgs() *LikeServiceLikeVideoArgs {
	return &LikeServiceLikeVideoArgs{}
}

func (p *LikeServiceLikeVideoArgs) InitDefault() {
}

var LikeServiceLikeVideoArgs_Req_DEFAULT *VideoLikeRequest

func (p *LikeServiceLikeVideoArgs) GetReq() (v *VideoLikeRequest) {
	if !p.IsSetReq() {
		return LikeServiceLikeVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeServiceLikeVideoArgs) SetReq(val *VideoLikeRequest) {
	p.Req = val
}

func (p *LikeServiceLikeVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeServiceLikeVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceLikeVideoArgs(%+v)", *p)
}

func (p *LikeServiceLikeVideoArgs) DeepEqual(ano *LikeServiceLikeVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeServiceLikeVideoArgs) Field1DeepEqual(src *VideoLikeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_LikeServiceLikeVideoArgs = map[int16]string{
	1: "req",
}

type LikeServiceLikeVideoResult struct {
	Success *VideoLikeResponse `thrift:"success,0,optional" frugal:"0,optional,VideoLikeResponse" json:"success,omitempty"`
}

func NewLikeServiceLikeVideoResult() *LikeServiceLikeVideoResult {
	return &LikeServiceLikeVideoResult{}
}

func (p *LikeServiceLikeVideoResult) InitDefault() {
}

var LikeServiceLikeVideoResult_Success_DEFAULT *VideoLikeResponse

func (p *LikeServiceLikeVideoResult) GetSuccess() (v *VideoLikeResponse) {
	if !p.IsSetSuccess() {
		return LikeServiceLikeVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeServiceLikeVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoLikeResponse)
}

func (p *LikeServiceLikeVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeServiceLikeVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceLikeVideoResult(%+v)", *p)
}

func (p *LikeServiceLikeVideoResult) DeepEqual(ano *LikeServiceLikeVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeServiceLikeVideoResult) Field0DeepEqual(src *VideoLikeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_LikeServiceLikeVideoResult = map[int16]string{
	0: "success",
}
